cmake_minimum_required(VERSION 2.8)

project (faster-examples)

set (faster_VERSION_MAJOR 0)
set (faster_VERSION_MINOR 1)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ")

find_package(OpenMP)
if(OPENMP_FOUND)
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
 set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif(OPENMP_FOUND)

find_package(MPI REQUIRED)
#set (MPI_CXX_COMPILER "mpicc")
add_definitions(${MPI_CXX_COMPILE_FLAGS})
include_directories(${MPI_CXX_INCLUDE_PATH})
link_directories(${MPI_CXX_LIBRARIES})
#set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
#set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
#include_directories("/usr/include/openmpi/")
set (EXTRA_LIBS ${EXTRA_LIBS} ${MPI_CXX_LIBRARIES})

if (cudaEnabled)
	find_package(CUDA QUIET REQUIRED)
	SET(CUDA_PROPAGATE_HOST_FLAGS ON)
	SET(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -gencode arch=compute_30,code=sm_30)
	SET(CUDA_SEPARABLE_COMPILATION ON)
endif (cudaEnabled)

include_directories ("${PROJECT_SOURCE_DIR}/../libfaster")
set (EXTRA_LIBS ${EXTRA_LIBS} faster)

#set (EXTRA_LIBS ${EXTRA_LIBS} efence)
#set (EXTRA_LIBS ${EXTRA_LIBS} duma)

function(add_example example_name)
	add_executable(${example_name} ${example_name}.cpp)
	target_link_libraries (${example_name}  ${EXTRA_LIBS})
endfunction(add_example)

add_example(fexample-int)
add_example(fexample-indexed)
add_example(fexample-bulk-int)
add_example(fexample-int-file)
#add_example(fexample-int-array)
add_example(fexample-int-vector)
add_example(fexample-mapByKey)
add_example(fexample-cogroup)
add_example(fexample-cogroup2)
add_example(pagerank)
add_example(pagerank-bulk)
add_example(pagerank-bp)
#add_example(pagerank-bp2)
add_example(pagerank-bulk2)
add_example(kmeans)
add_example(wordcount)
add_example(wordcount-bulk)
add_example(matmult)
add_example(matmult2)
add_example(matmult3)
add_example(logicreg)

if (cudaEnabled)
	cuda_add_executable(fexample-cuda fexample-cuda.cu)
	target_link_libraries (fexample-cuda  ${EXTRA_LIBS} ${CUDA_rt_LIBRARY})
endif (cudaEnabled)


#install(TARGETS fexample-int DESTINATION bin)
#install(TARGETS fexample-bulk-int DESTINATION bin)
#install(TARGETS fexample-int-file DESTINATION bin)
#install(TARGETS fexample-int-array DESTINATION bin)


if (examplesAsTests)
	function(mpi_test test_name args)
		add_test(NAME example-${test_name}
			WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
			COMMAND mpirun -np 4 ./examples/${test_name} ${args}
			)
		set_custom_env(example-${test_name})
	endfunction(mpi_test)
	mpi_test (fexample-int "")
	mpi_test (fexample-indexed "")
	mpi_test (fexample-bulk-int "")
	mpi_test (fexample-int-file "")
#mpi_test (fexample-int-array "")
	mpi_test (fexample-int-vector "")
	mpi_test (fexample-mapByKey "")
	mpi_test (fexample-cogroup "")
	mpi_test (fexample-cogroup2 "")
	mpi_test (fexample-cuda "")
	mpi_test (pagerank "../res/graph100-1.al")
	mpi_test (pagerank-bulk "../res/graph100-1.al")
	mpi_test (pagerank-bp "../res/graph100-1.al")
#mpi_test (pagerank-bp2 )
	mpi_test (pagerank-bulk2 "../res/graph100-1.al")
	mpi_test (kmeans "../res/points100-5.txt 2 5")
	mpi_test (wordcount "../res/wiki1000.en.txt")
	mpi_test (wordcount-bulk "../res/wiki1000.en.txt")
	mpi_test (matmult "../res/m100-1.csv 100 ../res/m100-2.csv")
	mpi_test (logicreg "")
endif (examplesAsTests)


